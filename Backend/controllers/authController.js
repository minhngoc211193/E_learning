const User = require('../models/User');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const nodemailer = require('nodemailer');
require('dotenv').config();

// H√†m t·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n
const generateRandomPassword = () => {
    return Math.random().toString(36).slice(-8); // T·∫°o m·∫≠t kh·∫©u 8 k√Ω t·ª±
};

// C·∫•u h√¨nh g·ª≠i email
const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: process.env.EMAIL_USER, // Email g·ª≠i ƒëi
        pass: process.env.EMAIL_PASS  // M·∫≠t kh·∫©u ·ª©ng d·ª•ng
    }
});

const authController = {
    registerUser: async (req, res) => {
        try {
            const { Fullname, Username, DateOfBirth, Gender, Role, Major, Email, PhoneNumber, SchoolYear } = req.body;

            const existingUser = await User.findOne({ $or: [{ Username }, { Email }] });
            if (existingUser) {
                return res.status(400).json({ message: "Username or email already exists" });
            }

            if ((Role === 'student' || Role === 'teacher') && !Major) {
                return res.status(400).json({ message: "Major is required for student or teacher roles" });
            }

            // ‚úÖ 1. T·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n
            const randomPassword = generateRandomPassword();
            const hashedPassword = await bcrypt.hash(randomPassword, 10);

            // ‚úÖ 2. L∆∞u user v√†o database
            const newUser = new User({
                Fullname,
                Username,
                Password: hashedPassword,
                DateOfBirth,
                Gender,
                Role: Role || "student",
                Major: (Role === 'student' || Role === 'teacher') ? Major : null,
                Email,
                SchoolYear: (Role === 'student') ? SchoolYear : null,
                PhoneNumber,
                firstLogin: true // ƒê√°nh d·∫•u ch∆∞a ƒë·ªïi m·∫≠t kh·∫©u
            });

            await newUser.save();

            // ‚úÖ 3. G·ª≠i email th√¥ng tin ƒëƒÉng nh·∫≠p cho user
            const mailOptions = {
                from: process.env.EMAIL_USER,
                to: Email,
                subject: "T√†i kho·∫£n m·ªõi c·ªßa b·∫°n t·∫°i Greenwich üéì",
                text: `üì¢ Xin ch√†o ${Fullname},
            
            Ch√∫ng t√¥i l√† admin c·ªßa Greenwich.
            
            üéâ Ch√∫c m·ª´ng! T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.
            
            üîπ Th√¥ng tin ƒëƒÉng nh·∫≠p:
            üìß Email: ${Email}
            üîë M·∫≠t kh·∫©u: ${randomPassword}
            
            ‚ö†Ô∏è L∆∞u √Ω: Vui l√≤ng ƒëƒÉng nh·∫≠p ngay v√† thay ƒë·ªïi m·∫≠t kh·∫©u ƒë·ªÉ b·∫£o m·∫≠t t√†i kho·∫£n.
            
            üí° N·∫øu c√≥ b·∫•t k·ª≥ v·∫•n ƒë·ªÅ g√¨, h√£y li√™n h·ªá v·ªõi ƒë·ªôi ng≈© h·ªó tr·ª£ th√¥ng qua s·ªë ƒëi·ªán tho·∫°i: 0969925773.
            
            Tr√¢n tr·ªçng,
            üöÄ ƒê·ªôi ng≈© qu·∫£n tr·ªã h·ªá th·ªëng Greenwich`
            };            

            await transporter.sendMail(mailOptions);

            res.status(201).json({ message: "User created and email sent successfully" });
        } catch (err) {
            console.error("‚ùå Register Error:", err);
            res.status(500).json({ message: "Internal server error" });
        }
    },

    loginUser: async (req, res) => {
        try {
            const user = await User.findOne({ Email: req.body.Email });
            if (!user) {
                return res.status(400).json({ message: "User not found" });
            }

            const validPassword = await bcrypt.compare(req.body.Password, user.Password);
            if (!validPassword) {
                return res.status(400).json({ message: "Incorrect password" });
            }

            // ‚úÖ Ki·ªÉm tra n·∫øu l√† l·∫ßn ƒëƒÉng nh·∫≠p ƒë·∫ßu ti√™n
            if (user.firstLogin) {
                return res.status(403).json({ message: "B·∫°n c·∫ßn ƒë·ªïi m·∫≠t kh·∫©u tr∆∞·ªõc khi ti·∫øp t·ª•c", firstLogin: true });
            }

            const accessToken = jwt.sign(
                { id: user._id, Role: user.Role },
                process.env.JWT_SECRET,
                { expiresIn: "1d" }
            );

            const { Password, ...others } = user.toObject();
            res.cookie("token", accessToken, {
                httpOnly: true,
                secure: process.env.NODE_ENV === "production",
                sameSite: "strict"
            }).status(200).json({...others, accessToken});
            
        } catch (err) {
            console.error("‚ùå Login Error:", err);
            res.status(500).json({ message: "Login failed", error: err.message });
        }
    },

    changePassword: async (req, res) => {
        try {
            const { userId, oldPassword, newPassword } = req.body;

            const user = await User.findById(userId);
            if (!user) {
                return res.status(400).json({ message: "User not found" });
            }

            const validPassword = await bcrypt.compare(oldPassword, user.Password);
            if (!validPassword) {
                return res.status(400).json({ message: "Incorrect old password" });
            }

            const hashedNewPassword = await bcrypt.hash(newPassword, 10);
            user.Password = hashedNewPassword;
            user.firstLogin = false; // ‚úÖ ƒê√°nh d·∫•u ƒë√£ ƒë·ªïi m·∫≠t kh·∫©u

            await user.save();
            res.status(200).json({ message: "Password changed successfully" });
        } catch (err) {
            console.error("‚ùå Change Password Error:", err);
            res.status(500).json({ message: "Error changing password", error: err.message });
        }
    }
};

module.exports = authController;
